{"remainingRequest":"/Users/chenxiaoxuan/Desktop/portfolio-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chenxiaoxuan/Desktop/portfolio-vue/src/views/Projects.vue?vue&type=template&id=6cfeddb4&","dependencies":[{"path":"/Users/chenxiaoxuan/Desktop/portfolio-vue/src/views/Projects.vue","mtime":1597051576315},{"path":"/Users/chenxiaoxuan/Desktop/portfolio-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenxiaoxuan/Desktop/portfolio-vue/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/chenxiaoxuan/Desktop/portfolio-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenxiaoxuan/Desktop/portfolio-vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}