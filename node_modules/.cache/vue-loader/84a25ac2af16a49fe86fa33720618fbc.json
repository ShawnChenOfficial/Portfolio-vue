{"remainingRequest":"/Users/chenxiaoxuan/Desktop/portfolio-vue/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/chenxiaoxuan/Desktop/portfolio-vue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/chenxiaoxuan/Desktop/portfolio-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chenxiaoxuan/Desktop/portfolio-vue/src/views/Projects.vue?vue&type=template&id=6cfeddb4&","dependencies":[{"path":"/Users/chenxiaoxuan/Desktop/portfolio-vue/src/views/Projects.vue","mtime":1597051576315},{"path":"/Users/chenxiaoxuan/Desktop/portfolio-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenxiaoxuan/Desktop/portfolio-vue/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/chenxiaoxuan/Desktop/portfolio-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenxiaoxuan/Desktop/portfolio-vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF92bS5fbSgwKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIlByb2plY3RzIiB9LCBbCiAgICAgIF9jKAogICAgICAgICJkaXYiLAogICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWNlbnRlciBwdC00MHZoIiwgYXR0cnM6IHsgaWQ6ICJmaXJzdC1QYWdlIiB9IH0sCiAgICAgICAgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXIiIH0sIFsKICAgICAgICAgICAgX2MoImg1IiwgW192bS5fdigiV2l0aCAyIHllYXJzKyBzdHVkeSwgaSBoYXZlIGRvbmUgc29tZSIpXSksCiAgICAgICAgICAgIF9jKCJoMSIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXdoaXRlIiB9LCBbX3ZtLl92KCJQcm9qZWN0cyIpXSksCiAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgIF92bS5fdigiIGluY2x1ZGluZyAiKSwKICAgICAgICAgICAgICBfYygic3Ryb25nIiwgeyBzdGF0aWNDbGFzczogInRleHQtd2hpdGUiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigid2ViIGFwcGxpY2F0aW9uIGRldmVsb3BtZW50IikKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXdoaXRlIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoImNsb3VkIGhvc3RpbmcgJiBkZXBsb3llbWVudCBzb2x1dGlvbiIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIsICIpLAogICAgICAgICAgICAgIF9jKCJzdHJvbmciLCB7IHN0YXRpY0NsYXNzOiAidGV4dC13aGl0ZSIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJkYXRhYmFzZSBkZXZlbG9wbWVudCIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgICAgICAgIF9jKCJzdHJvbmciLCB7IHN0YXRpY0NsYXNzOiAidGV4dC13aGl0ZSIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJBbmRyb2lkIGRldmVsb3BtZW50IikKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfdm0uX3YoIi4gTW9zdGx5LCBJIGhhdmUgYmVlbiBhICIpLAogICAgICAgICAgICAgIF9jKCJzdHJvbmciLCB7IHN0YXRpY0NsYXNzOiAidGV4dC13aGl0ZSIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJzeXN0ZW0gZGVzaWduZXIiKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICAgICAgICBfYygic3Ryb25nIiwgeyBzdGF0aWNDbGFzczogInRleHQtd2hpdGUiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigicHJvZ3JhbWVyIikKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiIHdpdGhpbiBhIHRlYW0gdG8gZGVsaXZlciBhIHF1YWxpdHkgYXBwbGljYXRpb24gdG8gbWVldCB0aGUgcmVxdWlyZW1lbnQgZm9yIGNvdXJzZSBwcm9qZWN0cyBvciByZWFsIGNsaWVudHMuIEFwYXJ0IG9mIHRoZSBza2lsbHMgSSBoYXZlIGxlYXJuZWQgZnJvbSBteSBjb3Vyc2UsIGFsc28sIEkgaGF2ZSBkb25lIGEgbG90IG9mICIKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKCJzdHJvbmciLCB7IHN0YXRpY0NsYXNzOiAidGV4dC13aGl0ZSIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJzZWxmLXJlc2VhcmNoZXMiKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICIgaW4gdGVybXMgb2Ygd2ViIGFwcGxpY2F0aW9uIGRldmVsb3BtZW50LCB3ZWIgc2VjdXJpdHkgYW5kIGNsb3VkIGNvbXB1dGluZyBkZXBsb3llbWVudCBhcyBJIHJlYWxseSB3YW50IHRvIGJlIGEgZnVsbC1zdGFjayBkZXZlbG9wZXIgaW4gdGhlIGZ1dHVyZS4gIgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidGV4dC1jZW50ZXIgYm9yZGVyLWRpdi10cmlnZ2VyIHctODBweCBtLWF1dG8gcHQtMiIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInRleHQtZGVjb3JhdGlvbi1ub25lIiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyAiYXNwLWNvbnRyb2xsZXIiOiAiSG9tZSIsICJhc3AtYWN0aW9uIjogIkNvbnRhY3QiIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiRW1haWwgTWUiKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImJvcmRlci1kaXYiIH0pCiAgICAgICAgICAgICAgXQogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX2MoCiAgICAgICAgImRpdiIsCiAgICAgICAgeyBzdGF0aWNDbGFzczogInRleHQtY2VudGVyIG1sLTUgbXItNSIsIGF0dHJzOiB7IGlkOiAic2Vjb25kLVBhZ2UiIH0gfSwKICAgICAgICBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lciB2ZXJ0aWNhbC1taWRkbGUgcHQtdi1zbS0yMHZoIiB9LCBbCiAgICAgICAgICAgIF9jKCJoMSIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXdoaXRlIHBiLTMiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIldlYiBkZXZlbG9wbWVudCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyByb3ctY29scy0xIHJvdy1jb2xzLW1kLTEgcHQtNSIgfSwgWwogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZCBtYi01IGJnLW5vbmUiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IG5vLWd1dHRlcnMiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImNvbC1tZC00IG9mZnNldC1tZC0wIGNvbC04IG9mZnNldC0yIiB9LAogICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidmVydGljYWwtbWlkZGxlLWltZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgaGVpZ2h0OiAiZml0LWNvbnRlbnQiIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJwb3NpdGlvbi1hYnNvbHV0ZSB0b3AtbGVmdCIKICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicG9zaXRpb24tYWJzb2x1dGUgdG9wLXJpZ2h0IgogICAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJwb3NpdGlvbi1hYnNvbHV0ZSBib3R0b20tbGVmdCIKICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicG9zaXRpb24tYWJzb2x1dGUgYm90dG9tLXJpZ2h0IgogICAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNhcmQtaW1nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHNyYzogIi9pbWFnZXMvRlhWX3RodW1iLnBuZyIsIGFsdDogIi4uLiIgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTgiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNhcmQtYm9keSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImg1IiwgeyBzdGF0aWNDbGFzczogImNhcmQtdGl0bGUgdGV4dC13aGl0ZSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBGWFYgZml0bmVzcyBtYW5hZ2VtZW50IHN5c3RlbSAiKQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJjYXJkLXRleHQgdGV4dC1sZWZ0IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAiIEEgU1BBIHdlYiBhcHBsaWNhdGlvbiB1c2VkIGZvciBodW1hbiBwZXJmb3JtYW5jZSBtYW5hZ2VtZW50IG1hZGUgYnkgQVNQLk5FVCBDT1JFICYgVnVlLmpzLiBBIFdlYiBiYXNlZCBtYW5hZ2VtZW50IHBsYXRmb3JtIHdoZXJlIG9yZ2FuaXphdGlvbnMgYW5kIHRlYW1zIGNhbiBtYW5hZ2UgYXRobGV0ZSBkYXRhLiBUaGlzIHN5c3RlbSBpbmNsdWRlcyBhIGZ1bmN0aW9uYWwgYWNjb3VudCBzZXJ2aWNlLCBtdWx0aXBsZSBzZXRzIG9mIGRhdGEgdmlzdWFsaXphdGlvbiBzZXJ2aWNlIGJhc2VkIG9uIGRpZmZlcmVudCB1c2VyIHBlcm1pc3Npb24sIGxpdmUgZXZlbnQgc3lzdGVtIHdoaWNoIGNvdWxkIHJ1biBhIGNvbWJpbmVkIHRlc3QgZm9yIGF0aGxldGVzLCBldGMuLi4gIgogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgInRleHQtY2VudGVyIGJvcmRlci1kaXYtdHJpZ2dlciB3LTEyMHB4IG0tYXV0byIKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInRleHQtZGVjb3JhdGlvbi1ub25lIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL3d3dy5meHYuY28ubnoiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJHbyB0byBTeXN0ZW0iKV0KICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiYm9yZGVyLWRpdiIgfSkKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgInRleHQtY2VudGVyIGJvcmRlci1kaXYtdHJpZ2dlciB3LTEyMHB4IG0tYXV0byIKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInRleHQtZGVjb3JhdGlvbi1ub25lIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9naXRodWIuY29tL1NoYXduQ2hlbk9mZmljaWFsL0ZYVi1XZWItQXBwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiR28gdG8gR2l0aHViIildCiAgICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImJvcmRlci1kaXYiIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdCiAgICAgICksCiAgICAgIF9jKAogICAgICAgICJkaXYiLAogICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWNlbnRlciBtbC01IG1yLTUiLCBhdHRyczogeyBpZDogInRoaXJkLVBhZ2UiIH0gfSwKICAgICAgICBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lciB2ZXJ0aWNhbC1taWRkbGUgcHQtdi1zbS0yMHZoIiB9LCBbCiAgICAgICAgICAgIF9jKCJoMSIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXdoaXRlIHBiLTMiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIkNsb3VkIEhvc3RpbmcgJiBEZXBsb3llbWVudCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyByb3ctY29scy0xIHJvdy1jb2xzLW1kLTEgcHQtNSIgfSwgWwogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZCBtYi01IGJnLW5vbmUiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IG5vLWd1dHRlcnMiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImNvbC1tZC00IG9mZnNldC1tZC0wIGNvbC04IG9mZnNldC0yIiB9LAogICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidmVydGljYWwtbWlkZGxlLWltZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgaGVpZ2h0OiAiZml0LWNvbnRlbnQiIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJwb3NpdGlvbi1hYnNvbHV0ZSB0b3AtbGVmdCIKICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicG9zaXRpb24tYWJzb2x1dGUgdG9wLXJpZ2h0IgogICAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJwb3NpdGlvbi1hYnNvbHV0ZSBib3R0b20tbGVmdCIKICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicG9zaXRpb24tYWJzb2x1dGUgYm90dG9tLXJpZ2h0IgogICAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNhcmQtaW1nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogIi9pbWFnZXMvY2xvdWQtY29tcHV0aW5nLnBuZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIi4uLiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1tZC04IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjYXJkLWJvZHkiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJoNSIsIHsgc3RhdGljQ2xhc3M6ICJjYXJkLXRpdGxlIHRleHQtd2hpdGUiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJDbG91ZCBob3N0aW5nIHNvbHV0aW9uIikKICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZC10ZXh0IHRleHQtbGVmdCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgIiBIaWdoIHF1YWxpdHkgYW5kIGNvc3QgZWZmZWN0aXZlbHkgc29sdXRpb25zIGJhc2VkIG9uIDMgc2NlbmFyaW9zIDMgbGV2ZWxzIG9mIGJ1c2luZXNzIHNjYWxlIGZvciB0aGUgVHJhZGVNZSBjb21wYW55IGFzIHRoZSBiYWNrZ3JvdW5kLiBFYWNoIHNjZW5hcmlvIHJlcHJlc2VudHMgZGlmZmVyZW50IGJ1c2luZXNzIHNjYWxlLCByZXF1aXJlcyBkaWZmZXJlbnQgY2xvdWQgaG9zdGluZyB0ZWNobmlxdWUgYWNyb3NzIGZyb20gIgogICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICBfYygic3Ryb25nIiwgeyBzdGF0aWNDbGFzczogInRleHQtd2hpdGUiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIklhYVMsIikKICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJzdHJvbmciLCB7IHN0YXRpY0NsYXNzOiAidGV4dC13aGl0ZSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiTGFhUyIpCiAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiB0byAiKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXdoaXRlIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJrOHMoS3ViZXJuZXRlcykiKQogICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIuICIpCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgInRleHQtY2VudGVyIGJvcmRlci1kaXYtdHJpZ2dlciB3LTEyMHB4IG0tYXV0byIKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInRleHQtZGVjb3JhdGlvbi1ub25lIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9naXRodWIuY29tL1NoYXduQ2hlbk9mZmljaWFsL0Nsb3VkLUhvc3RpbmctU29sdXRpb24tZm9yLVRyYWRlTWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJHbyB0byBHaXRIdWIiKV0KICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiYm9yZGVyLWRpdiIgfSkKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX2MoCiAgICAgICAgImRpdiIsCiAgICAgICAgeyBzdGF0aWNDbGFzczogInRleHQtY2VudGVyIG1sLTUgbXItNSIsIGF0dHJzOiB7IGlkOiAiZm9ydGgtUGFnZSIgfSB9LAogICAgICAgIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIHZlcnRpY2FsLW1pZGRsZSBwdC12LXNtLTIwdmgiIH0sIFsKICAgICAgICAgICAgX2MoImgxIiwgeyBzdGF0aWNDbGFzczogInRleHQtd2hpdGUgcGItNSIgfSwgW192bS5fdigiRGF0YWJhc2UiKV0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyByb3ctY29scy0xIHJvdy1jb2xzLW1kLTEgcHQtNSIgfSwgWwogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZCBtYi01IGJnLW5vbmUiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IG5vLWd1dHRlcnMiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImNvbC1tZC00IG9mZnNldC1tZC0wIGNvbC04IG9mZnNldC0yIiB9LAogICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidmVydGljYWwtbWlkZGxlLWltZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgaGVpZ2h0OiAiZml0LWNvbnRlbnQiIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJwb3NpdGlvbi1hYnNvbHV0ZSB0b3AtbGVmdCIKICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicG9zaXRpb24tYWJzb2x1dGUgdG9wLXJpZ2h0IgogICAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJwb3NpdGlvbi1hYnNvbHV0ZSBib3R0b20tbGVmdCIKICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicG9zaXRpb24tYWJzb2x1dGUgYm90dG9tLXJpZ2h0IgogICAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNhcmQtaW1nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogIi9pbWFnZXMvQ2FyUmVudGFsX3RodW1iLnBuZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIi4uLiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1tZC04IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjYXJkLWJvZHkiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJoNSIsIHsgc3RhdGljQ2xhc3M6ICJjYXJkLXRpdGxlIHRleHQtd2hpdGUiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgRGF0YWJhc2UgZm9yIENhciBSZW50YWwgU3lzdGVtICIpCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImNhcmQtdGV4dCB0ZXh0LWxlZnQiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICIgQSBkYXRhYmFzZSBwcm9qZWN0IGRlc2lnbmVkIHdoZW4gSSB3YXMgaW4gbXkgMm5kIHllYXIgb2YgbXkgY291cnNlIHN0dWR5LiBJdCB3YXMgYWltZWQgdG8gbWVldCB0aGUgcmVxdWlyZW1lbnRzIG9mIGEgY2FyIHJlbnRhbCBjb21wYW55IHRvIG1hbmFnZSB0aGVpciBkYWlseSBidXNpbmVzc2VzLCBpbmNsdWRpbmcgbW9uaXRvcmluZyBzdGF0dXMgb2YgY2FycywgY2FyIHJlbnRhbCAmIHNhbGVzLCBvbmxpbmUgYm9va2luZywgaW5zdXJhbmNlIGNsYWltIGhpc3RvcnksIGZpbmFuY2lhbCBtYW5hZ2VtZW50LCBldGMuLi4gIgogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgInRleHQtY2VudGVyIGJvcmRlci1kaXYtdHJpZ2dlciB3LTEyMHB4IG0tYXV0byIKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInRleHQtZGVjb3JhdGlvbi1ub25lIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9naXRodWIuY29tL1NoYXduQ2hlbk9mZmljaWFsL0RhdGFiYXNlLWZvci1DYXItUmVudGFsLVN5c3RlbSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkdvIHRvIEdpdEh1YiIpXQogICAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJib3JkZXItZGl2IiB9KQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXQogICAgICApLAogICAgICBfYygKICAgICAgICAiZGl2IiwKICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGV4dC1jZW50ZXIgbWwtNSBtci01IiwgYXR0cnM6IHsgaWQ6ICJmaWZ0aC1QYWdlIiB9IH0sCiAgICAgICAgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXIgdmVydGljYWwtbWlkZGxlIHB0LXYtc20tMjB2aCIgfSwgWwogICAgICAgICAgICBfYygiaDEiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC13aGl0ZSBwYi01IiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJBbmRyb2lkIERldmVsb3BtZW50IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IHJvdy1jb2xzLTEgcm93LWNvbHMtbWQtMSBwdC01IiB9LCBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjYXJkIG1iLTUgYmctbm9uZSIgfSwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3cgbm8tZ3V0dGVycyIgfSwgWwogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTQgb2Zmc2V0LW1kLTAgY29sLTggb2Zmc2V0LTIiIH0sCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ2ZXJ0aWNhbC1taWRkbGUtaW1nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyBoZWlnaHQ6ICJmaXQtY29udGVudCIgfQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInBvc2l0aW9uLWFic29sdXRlIHRvcC1sZWZ0IgogICAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJwb3NpdGlvbi1hYnNvbHV0ZSB0b3AtcmlnaHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInBvc2l0aW9uLWFic29sdXRlIGJvdHRvbS1sZWZ0IgogICAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJwb3NpdGlvbi1hYnNvbHV0ZSBib3R0b20tcmlnaHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY2FyZC1pbWciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiAiL2ltYWdlcy9raXdpTGVhcm5fdGh1bWIucG5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0OiAiLi4uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTgiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNhcmQtYm9keSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImg1IiwgeyBzdGF0aWNDbGFzczogImNhcmQtdGl0bGUgdGV4dC13aGl0ZSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIk1vYmlsZSBhcHBsaWNhdGlvbiIpCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImNhcmQtdGV4dCB0ZXh0LWxlZnQiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICIgVGhpcyBpcyBhbiBBbmRyb2lkIGFwcGxpY2F0aW9uIHByb2plY3QgSSBjcmVhdGVkIHdoaWxlIEkgd2FzIHN0dWR5aW5nIGluIG15IDJuZCB5ZWFyIG9mIEJJVC4gVGhpcyBtb2JpbGUgYXBwbGljYXRpb24gd2FzIGRlc2lnbmVkIHRvIHByb3ZpZGUgYSBwbGF0Zm9ybSBmb3IgdGhvc2UgcGVvcGxlIHdobyBydW4gcHJpdmF0ZSBjbGFzc2VzIHRvIHRlYWNoIHBlb3BsZSwgb3IgcGVvcGxlIHdobyB3YW50IHRvIGZpbmQgYSBwcml2YXRlIGNsYXNzIHRvIGxlYXJuIHNvbWV0aGluZy4gQXV0aG9yaXplZCB0ZWFjaGVycyBjYW4gcG9zdCB0aGVpciBjbGFzc2VzIGluZm9ybWF0aW9uIG9uIHRoaXMgcGxhdGZvcm0sIGFuZCBldmVyeW9uZSBjYW4gdmlldyB0aGUgY2xhc3MgaW5mb3JtYXRpb24gYmFzZWQgb24gdGhlIGNhdGVnb3JpZXMuIEFzIGl0IHdhcyBhIGdyb3VwIHByb2plY3QsIEkgd2FzIHRoZSBzeXN0ZW0gZGVzaWduZXIgYW5kIGRldmVsb3BlciB0byBpbXBsZW1lbnQgdGhpcyBzeXN0ZW0uICIKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0LWNlbnRlciBib3JkZXItZGl2LXRyaWdnZXIgdy0xMjBweCBtLWF1dG8iCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ0ZXh0LWRlY29yYXRpb24tbm9uZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImh0dHBzOi8vZ2l0aHViLmNvbS9TaGF3bkNoZW5PZmZpY2lhbC9LaXdpLUxlYXJuIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiR28gdG8gR2l0SHViIildCiAgICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImJvcmRlci1kaXYiIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdCiAgICAgICksCiAgICAgIF9jKAogICAgICAgICJkaXYiLAogICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWNlbnRlciBtbC01IG1yLTUiLCBhdHRyczogeyBpZDogInNpeHRoLVBhZ2UiIH0gfSwKICAgICAgICBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lciB2ZXJ0aWNhbC1taWRkbGUgcHQtdi1zbS0yMHZoIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWItNSBiZy1ub25lIiB9LCBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3cgIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC0xMiB0ZXh0LWNlbnRlciBwci0wIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJoNSIsIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBTZWUgbW9yZSBwcm9qZWN0cyBhdCAiKSwKICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJwb2ludGVyIiwKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJtYXgtaGVpZ2h0IjogIjMzcHgiLCB3aWR0aDogImF1dG8iIH0sCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICBzcmM6ICIvaW1hZ2VzL0dpdEh1Yl9Mb2dvX1doaXRlLnBuZyIsCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIi4uLiIsCiAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6CiAgICAgICAgICAgICAgICAgICAgICAgICAgImxvY2F0aW9uLmhyZWY9J2h0dHBzOi8vZ2l0aHViLmNvbS9TaGF3bkNoZW5PZmZpY2lhbCciCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXQogICAgICApCiAgICBdKQogIH0KXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}