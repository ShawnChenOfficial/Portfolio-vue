{"remainingRequest":"/Users/chenxiaoxuan/Desktop/portfolio-vue/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/chenxiaoxuan/Desktop/portfolio-vue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/chenxiaoxuan/Desktop/portfolio-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chenxiaoxuan/Desktop/portfolio-vue/src/views/Resume.vue?vue&type=template&id=07d40732&","dependencies":[{"path":"/Users/chenxiaoxuan/Desktop/portfolio-vue/src/views/Resume.vue","mtime":1597059698848},{"path":"/Users/chenxiaoxuan/Desktop/portfolio-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenxiaoxuan/Desktop/portfolio-vue/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/chenxiaoxuan/Desktop/portfolio-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenxiaoxuan/Desktop/portfolio-vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}